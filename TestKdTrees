import static org.junit.Assert.*;
import kdTrees.KdTrees;
import kdTrees.RectHV;

import org.junit.Before;
import org.junit.Test;

import edu.princeton.cs.algs4.Point2D;

public class TestKdTrees {
	

	KdTrees<String> tree = new KdTrees<>();
	KdTrees<String> emptyTree = new KdTrees<>();

	@Before
	public void setUp() throws Exception {
		Point2D[] points = {new Point2D(0,0), new Point2D(1,1), new Point2D(2,2), new Point2D(1,-1), new Point2D(2,-2),
				new Point2D(-1,1), new Point2D(-2,2), new Point2D(-1,-1), new Point2D(-2,-2)};
		
		for (Point2D point : points) {
			tree.put(point, point.toString());
		}
	}

	@Test
	public void testKdTrees() {
		KdTrees<Integer> tester = new KdTrees<>();
		assertEquals(0, tester.size());
	}

	@Test
	public void testIsEmpty() {
		assertEquals(true, emptyTree.isEmpty());
		assertEquals(false, tree.isEmpty());
	}

	@Test
	public void testSize() {
		assertEquals(0, emptyTree.size());
		assertEquals(9, tree.size());
		
	}

	@Test
	public void testPut() {
		tree.put(new Point2D(3,3), "hello");
		assertEquals(10, tree.size());
		assertEquals("hello", tree.get(new Point2D(3,3)));
		tree.put(new Point2D(5,5), "welcome");
		assertEquals(10, tree.size());
		assertEquals("welcome", tree.get(new Point2D(5,5)));
	}
	
	@Test (expected = NullPointerException.class)
	public void testPutNull() {
		tree.put(null, null);
		tree.put(null, "hello");
		tree.put(new Point2D(6,5), null);
	}

	@Test
	public void testGet() {
		Point2D[] points = {new Point2D(0,0), new Point2D(1,1), new Point2D(2,2), new Point2D(1,-1), new Point2D(2,-2),
				new Point2D(-1,1), new Point2D(-2,2), new Point2D(-1,-1), new Point2D(-2,-2)};
		for (Point2D point : points) {
			assertEquals(point.toString(), tree.get(point));
		}
		assertEquals(null, tree.get(new Point2D(Double.MAX_VALUE, Double.MAX_VALUE)));
		assertEquals(null, tree.get(new Point2D(-Double.MAX_VALUE,-Double.MAX_VALUE)));
		assertEquals(null, tree.get(new Point2D(Double.MIN_VALUE, Double.MIN_VALUE)));
	}
	
	@Test (expected = NullPointerException.class)
	public void testGetNull() {
		tree.get(null);
	}

	@Test
	public void testContains() {
		Point2D[] points = {new Point2D(0,0), new Point2D(1,1), new Point2D(2,2), new Point2D(1,-1), new Point2D(2,-2),
				new Point2D(-1,1), new Point2D(-2,2), new Point2D(-1,-1), new Point2D(-2,-2)};
		for (Point2D point : points) assertEquals(true, tree.contains(point));
		assertEquals(false, tree.contains(new Point2D(Double.MAX_VALUE, Double.MAX_VALUE)));
		assertEquals(false, tree.contains(new Point2D(-Double.MAX_VALUE,-Double.MAX_VALUE)));
		assertEquals(false, tree.contains(new Point2D(Double.MIN_VALUE, Double.MIN_VALUE)));
	}
	
	@Test (expected = NullPointerException.class)
	public void testContainsNull() {
		tree.contains(null);
	}

	

	@Test
	public void testRange() {
		Iterable<Point2D> none = tree.range(new RectHV(10,10,11,11));
		Iterable<Point2D> one = tree.range(new RectHV(-0.5, -0.5, 0.5, 0.5));
		Point2D[] oneResult = {new Point2D(0,0)};
		Iterable<Point2D> five = tree.range(new RectHV(-1, -1, 1, 1));
		Point2D[] fiveResutlt = {new Point2D(0,0), new Point2D(-1,1), new Point2D(-1,-1), new Point2D(1,1), new Point2D(1,-1)};
		
		int i = 0;
		for (Point2D point : one) {
			assertEquals(oneResult[i++], point);
		}
		i = 0;
		for (Point2D point : five) {
			assertEquals(fiveResutlt[i++], point);
		}
	}
	


	@Test
	public void testNearest() {
		assertEquals(new Point2D(0,0), tree.nearest(new Point2D(0,0)));	
		assertEquals(new Point2D(2,2), tree.nearest(new Point2D(10000000, 10000000)));
		assertEquals(new Point2D(-2,-2), tree.nearest(new Point2D(-10000000, -10000000)));
		assertEquals(new Point2D(-2, 2), tree.nearest(new Point2D(-10000000, 10000000)));
		assertEquals(new Point2D(2, -2), tree.nearest(new Point2D(10000000, -10000000)));
		assertEquals(new Point2D(1,1), tree.nearest(new Point2D(0.40000000001, 0.6)));
	
	}

}
